Request -> Servlet [Database Communication + Business Logic]
					
		[Form-Fill]

		Form-Fill 
				field empty
				Pincode
Servlet :
		init
		service
		destroy 
		
Website [Application]
To do a Validation we have concept of Filter

	Validation : 		
			Client Side [Angular HTML5]:
					HTML5
					<input type="text" max=50 pattern min 
					<input type="number" max min
			Server Side [Validation]
			
	Filter acts a Pre-processer
	
	Load on server will be reduced
	500 request
		1 init
		500 service
		1 destroy
	Preprocess : ValidationClass
		ValidationClass -> Inputs validate 
		
Text
Number
Password
Date
Email

MVC:

	Model : Data bind (Bean)
	View  : JSP
	Controller : Servlet,Dao
Filter : Interface (javax.servlet.Filter)
Implements
	Servlet :
		init
		service
		destroy
		
	Filter [Lifecyle of Filter]:
		init
		doFilter
		destroy
	1. Order of execution of filters (multiple filters)is decided based on the 
		entry of <filter-mapping> and <filter> done in the web.xml.
	2. In web.xml will do the following entry for mapping the filter:
		<filter>
			<display-name>SignUpFilter</display-name>
			<filter-name>SignUpFilter</filter-name>
			<filter-class>com.filter.SignUpFilter</filter-class>
		</filter>
		<filter-mapping>
			<filter-name>SignUpFilter</filter-name>
			<url-pattern>/signup</url-pattern>
		</filter-mapping>
	3. 	
Websites [Educational Website][File]:
	1. Course available		
	2. Schedules
	3. Faculties				

So, whenever we want to store data without the help of database we can store it in web.xml and 
there are two approaches 
1. ServletConfig [Interface] : Scope is for particular servlet
	We can iterate over parameters, get the parameters value. [R]
2. ServletContext [Interface] : Scope is for whole application
	We can iterate over parameters, get the parameters value, remove the parameter, set the parameters [CRUD]
MNC : Procedures, Functions, etc.

Error Tracking
1. Database Track [RDMS] : [Functions, Procedure] 
2. Application 

Listener : Someone who tracks the events happening at server level is managed or rather listened by listener.
1. Request Listener	
	ServletRequest : To track down create and deletion of a request
	ServletAttributeRequest : To track attribute properties updation, deletion on a request
2. Context Listener
	ContextRequest
	
3. Session Listener
	SessionListener 
	Session
Why Listener ?
	1. Error Tracking
	2. User Tracking
	3. Server Information Tracking


Storage 
		